#include <stdio.h>
#include <stdlib.h>
// Define the structure of a node
struct Node {
 int data;
 struct Node* left;
 struct Node* right;
};
// Function to create a new node
struct Node* createNode(int value) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = value;
 newNode->left = newNode->right = NULL;
 return newNode;
}
// Recursive function to insert a node in BST
struct Node* insert(struct Node* root, int value) {
 if (root == NULL) {
 return createNode(value);
 }
 if (value < root->data)
 root->left = insert(root->left, value);
 else if (value > root->data)
 root->right = insert(root->right, value);
 
 return root;
}
// Inorder Traversal (to check if insertion worked correctly)
void inorder(struct Node* root) {
 if (root != NULL) {
 inorder(root->left);
 printf("%d ", root->data);
 inorder(root->right);
 }
}
// Driver code
int main() {
 struct Node* root = NULL;
 // Insert nodes
 root = insert(root, 50);
 root = insert(root, 30);
 root = insert(root, 70);
 root = insert(root, 20);
 root = insert(root, 40);
 root = insert(root, 60);
 root = insert(root, 80);
 printf("Inorder Traversal after Insertion:\n");
 inorder(root);
 return 0;
}
