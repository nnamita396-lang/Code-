#include <stdio.h>
#include <stdlib.h>
// Structure for a node
struct Node {
 int data;
 struct Node* left;
 struct Node* right;
};
// Create a new node
struct Node* createNode(int value) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = value;
 newNode->left = newNode->right = NULL;
 return newNode;
}
// Insert a node (recursive)
struct Node* insert(struct Node* root, int value) {
 if (root == NULL)
 return createNode(value);
 if (value < root->data)
 root->left = insert(root->left, value);
 else if (value > root->data)
 root->right = insert(root->right, value);
 return root;
}
// Find the minimum value node in a subtree
struct Node* findMin(struct Node* root) {
 while (root->left != NULL)
 root = root->left;
 return root;
}
// Delete a node (recursive)
struct Node* deleteNode(struct Node* root, int key) {
 if (root == NULL)
 return root;
 // Search for the node
 if (key < root->data)
 root->left = deleteNode(root->left, key);
 else if (key > root->data)
 root->right = deleteNode(root->right, key);
 else {
 // Node found
 // Case 1: No child or one child
 if (root->left == NULL) {
 struct Node* temp = root->right;
 free(root);
 return temp;
 }
 else if (root->right == NULL) {
 struct Node* temp = root->left;
 free(root);
 return temp;
 }
 // Case 2: Two children
 struct Node* temp = findMin(root->right);
 root->data = temp->data;
 root->right = deleteNode(root->right, temp->data);
 }
 return root;
}
// Inorder traversal
void inorder(struct Node* root) {
 if (root != NULL) {
 inorder(root->left);
 printf("%d ", root->data);
 inorder(root->right);
 }
}
// Driver code
int main() {
 struct Node* root = NULL;
 // Insert initial nodes
 root = insert(root, 50);
 root = insert(root, 30);
 root = insert(root, 70);
 root = insert(root, 20);
 root = insert(root, 40);
 root = insert(root, 60);
 root = insert(root, 80);
 printf("Inorder Traversal before Deletion:\n");
 inorder(root);
 // Delete a node
 root = deleteNode(root, 70);
 printf("\nInorder Traversal after Deleting 70:\n");
 inorder(root);
 return 0;
}
