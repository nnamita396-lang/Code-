#include <stdio.h>
// Function to calculate string length
int strLength(char str[]) {
 int len = 0;
 while (str[len] != '\0')
 len++;
 return len;
}
// Function to check if pattern matches starting at position pos in STR
int matchPattern(char STR[], char PAT[], int pos) {
 int i = 0;
 while (PAT[i] != '\0') {
 if (STR[pos + i] != PAT[i])
 return 0; // No match
 i++;
 }
 return 1; // Match found
}
// Function to perform find and replace operation
void replacePattern(char STR[], char PAT[], char REP[]) {
 char result[500];
 int i = 0, j = 0, k;
 int found = 0; // Flag to track if pattern found
 int lenSTR = strLength(STR);
 int lenPAT = strLength(PAT);
 int lenREP = strLength(REP);
 while (i < lenSTR) {
 if (matchPattern(STR, PAT, i)) {
 // Copy replacement string to result
 for (k = 0; k < lenREP; k++)
 result[j++] = REP[k];
 i += lenPAT; // Skip pattern length
 found = 1;
 } else {
 // Copy single character if pattern not matched
 result[j++] = STR[i++];
 }
 }
 result[j] = '\0'; // End of string
 // Display result or message
 if (found)
 printf("\nModified String: %s\n", result);
 else
 printf("\nPattern not found in the main string.\n");
}
int main() {
 char STR[200], PAT[50], REP[50];
 int i;
 // Read main, pattern, and replace strings
 printf("Enter Main String (STR): ");
 fgets(STR, sizeof(STR), stdin);
 printf("Enter Pattern String (PAT): ");
 fgets(PAT, sizeof(PAT), stdin);
 printf("Enter Replace String (REP): ");
 fgets(REP, sizeof(REP), stdin);
 // Remove newline characters manually
 for (i = 0; STR[i] != '\0'; i++)
 if (STR[i] == '\n') STR[i] = '\0';
 for (i = 0; PAT[i] != '\0'; i++)
 if (PAT[i] == '\n') PAT[i] = '\0';
 for (i = 0; REP[i] != '\0'; i++)
 if (REP[i] == '\n') REP[i] = '\0';
 // Perform pattern matching and replacement
 replacePattern(STR, PAT, REP);
 return 0;
}
