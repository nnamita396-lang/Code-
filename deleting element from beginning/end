#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node* next;
};
struct Node* head = NULL;
// Inserting elements at end
void insert(int data) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = data;
if (head == NULL) {
head = newNode;
newNode->next = head;
} else {
struct Node* temp = head;
while (temp->next != head) {
temp = temp->next;
}
temp->next = newNode;
newNode->next = head;
}
}
// Deleting element from beginning
void deleteBegin() {
if (head == NULL) {
printf("List is empty\n");
return;
}
if (head->next == head) {
free(head);
head = NULL;
return;
}
struct Node* temp = head;
struct Node* last = head;
while (last->next != head) {
last = last->next;
}
last->next = head->next;
head = head->next;
free(temp);
}
// Deleting elements from end
void deleteEnd() {
if (head == NULL) {
printf("List is empty\n");
return;
}
if (head->next == head) {
free(head);
head = NULL;
return;
}
struct Node* temp = head;
while (temp->next->next != head) {
temp = temp->next;
}
free(temp->next);
temp->next = head;
}
// Display list
void display() {
if (head == NULL) {
printf("List is empty\n");
printf("List is empty\n");
printf("List is empty\n");
return;
}
struct Node* temp = head;
do {
printf("%d -> ", temp->data);
temp = temp->next;
} while (temp != head);
printf("(head)\n");
}
int main() {
int choice, data;
while (1) {
printf("\n--- Circular Linked List Menu ---\n");
printf("1. Insert\n");
printf("2. Delete from Beginning\n");
printf("3. Delete from End\n");
printf("4. Display\n");
printf("5. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter data to insert: ");
scanf("%d", &data);
insert(data);
break;
case 2:
deleteBegin();
break;
case 3:
deleteEnd();
break;
case 4:
display();
break;
case 5:
printf("Exiting...\n");
exit(0);
default:
printf("Invalid choice! Try again.\n")}
}
return 0;
}
