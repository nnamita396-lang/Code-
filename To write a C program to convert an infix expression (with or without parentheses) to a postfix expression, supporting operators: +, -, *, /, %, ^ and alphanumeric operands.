#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAX 100

char stack[MAX];
int top = -1;

// Function to push to stack
void push(char ch) {
    if (top == MAX - 1)
        printf("Stack Overflow\n");
    else
        stack[++top] = ch;
}

// Function to pop from stack
char pop() {
    if (top == -1)
        return '\0'; // Stack Underflow
    return stack[top--];
}

// Function to return precedence
int precedence(char op) {
    switch (op) {
        case '^': return 3;
        case '*':
        case '/':
        case '%': return 2;
        case '+':
        case '-': return 1;
        default: return 0;
    }
}

// Function to check if operator is right-associative
int isRightAssociative(char op) {
    return (op == '^');
}

// Function to check if character is operator
int isOperator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '%' || ch == '^';
}

// Main function to convert infix to postfix
void infixToPostfix(char infix[], char postfix[]) {
    int i, k = 0;
    char ch, temp;

    for (i = 0; i < strlen(infix); i++) {
        ch = infix[i];

        if (isalnum(ch)) {
            postfix[k++] = ch; // Operand goes directly to postfix
        }
        else if (ch == '(') {
            push(ch);
        }
        else if (ch == ')') {
            while ((temp = pop()) != '(')
                postfix[k++] = temp;
        }
        else if (isOperator(ch)) {
            while (top != -1 && stack[top] != '(' &&
                  ((precedence(stack[top]) > precedence(ch)) ||
                  (precedence(stack[top]) == precedence(ch) && !isRightAssociative(ch)))) {
                postfix[k++] = pop();
            }
            push(ch);
        }
    }

    // Pop remaining operators from stack
    while (top != -1) {
        postfix[k++] = pop();
    }

    postfix[k] = '\0'; // Null-terminate the postfix expression
}

int main() {
    char infix[MAX], postfix[MAX];

    printf("Enter an infix expression: ");
    scanf("%s", infix);

    infixToPostfix(infix, postfix);

    printf("Postfix expression: %s\n", postfix);

    return 0;
}
